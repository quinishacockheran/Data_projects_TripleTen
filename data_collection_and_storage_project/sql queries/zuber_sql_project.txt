Below are the queries that were successfully ran on the TripleTen platform.  
--------------------  

-- Task 1:
-- Print the company_name field and count the number of taxi rides for each taxi company
-- for November 15-16, 2017. The count is named as trips_amount and the results are
-- sorted in descending order by trips_amount.

select
    cabs.company_name as company_name,
    count(trips.trip_id) as trips_amount
from
    trips
join
    cabs  
on
    trips.cab_id = cabs.cab_id
where
    trips.start_ts between '2017-11-15' and '2017-11-16 23:59:59'
group by
    cabs.company_name
order by
    trips_amount desc;
--------------------  

-- Task 2:
-- Find the number of rides for every taxi company whose name contains the words "Yellow" or "Blue"
-- for November 1-7, 2017. The resulting count is named trips_amount and the results are grouped by company_name.

SELECT
    cabs.company_name AS company_name,
    COUNT(trips.trip_id) AS trips_amount
FROM
    trips
INNER JOIN
    cabs ON cabs.cab_id = trips.cab_id
WHERE
    (cabs.company_name LIKE '%Yellow%' OR cabs.company_name LIKE '%Blue%')
    AND CAST(start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
GROUP BY
    cabs.company_name;
--------------------  

-- Task 3:
-- For November 1-7, 2017, the most popular taxi companies were Flash Cab and Taxi Affiliation Services.
-- Find the number of rides for these two companies (naming the count trips_amount)
-- and group all other companies under the label "Other."
-- Group the results by taxi company names (named as company) and sort in descending order by trips_amount.

SELECT
    cabs.company_name AS company,
    COUNT(trips.trip_id) AS trips_amount
FROM
    trips
INNER JOIN
    cabs ON cabs.cab_id = trips.cab_id
WHERE
    cabs.company_name = 'Flash Cab'
    AND CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
GROUP BY
    cabs.company_name

UNION ALL

SELECT
    cabs.company_name AS company,
    COUNT(trips.trip_id) AS trips_amount
FROM
    trips
INNER JOIN
    cabs ON cabs.cab_id = trips.cab_id
WHERE
    cabs.company_name = 'Taxi Affiliation Services'
    AND CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
GROUP BY
    cabs.company_name

UNION ALL

SELECT
    'Other' AS company,
    COUNT(trips.trip_id) AS trips_amount
FROM
    trips
INNER JOIN
    cabs ON cabs.cab_id = trips.cab_id
WHERE
    cabs.company_name NOT IN ('Flash Cab', 'Taxi Affiliation Services')
    AND CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
GROUP BY
    company

ORDER BY
    trips_amount DESC;
--------------------  

-- Task 4:
-- Retrieve the identifiers and names for the O'Hare and Loop neighborhoods from the neighborhoods table.
SELECT
    neighborhood_id,
    name
FROM
    neighborhoods
WHERE
    name = 'O''Hare' OR name = 'Loop';
--------------------  

-- Task 5:
-- For each hour, retrieve the weather condition records from the weather_records table.
-- Using the CASE operator, label the weather as 'Bad' if the description contains 'rain' or 'storm'
-- and as 'Good' for all other conditions.
-- The final output includes the timestamp (ts) representing the date and hour, and the computed weather_conditions.

SELECT
    ts,
    CASE
        WHEN description LIKE '%rain%' OR description LIKE '%storm%' THEN 'Bad'
        ELSE 'Good'
    END AS weather_conditions
FROM
    weather_records;
--------------------  

-- Task 6:
-- Retrieve from the trips table all rides that started in the Loop (pickup_location_id: 50) on a Saturday
-- and ended at O'Hare (dropoff_location_id: 63). For each ride, retrieve:
--   1. start_ts (ride start timestamp)
--   2. weather_conditions (using the CASE method from Task 5)
--   3. duration_seconds (duration of the ride)
-- Only include rides for which weather conditions data is available.
-- Sort the results by trip_id.

SELECT
    trips.start_ts,
    weather_conditions.weather_conditions,
    trips.duration_seconds
FROM
    trips
JOIN (
    SELECT
        ts,
        CASE
            WHEN description LIKE '%rain%' OR description LIKE '%storm%' THEN 'Bad'
            ELSE 'Good'
        END AS weather_conditions
    FROM
        weather_records
) AS weather_conditions ON trips.start_ts = weather_conditions.ts
WHERE
    trips.pickup_location_id = 50
    AND trips.dropoff_location_id = 63
    AND EXTRACT(DOW FROM trips.start_ts) = 6
ORDER BY
    trips.trip_id;
--------------------  

End of SQL queries.  
--------------------